import java.net.URLEncoder

class SonarApiClient
{
    static def sonarLocalUrl = 'http://<%= p('sonar.server.address') %>:<%= p('sonar.server.port') %>'
    static def sonarApiUrl = sonarLocalUrl + '/api/'

    static def sonarUrl = '<%= p('sonar.server.url') %>'

    static def gitHubUrl = '<%= p('github.server.url') %>'
    static def clientSecret = '<%= p('sonar.client.secret') %>'
    static def clientId = '<%= p('sonar.client.id') %>'

    static def username = '<%= p('sonar.admin.username') %>'
    static def password = '<%= p('sonar.admin.password') %>'

    static def groupsSync = '<%= p('sonar.groups_sync') %>'

    static def organisations = '<%= p('sonar.organisations.list') %>'
    static def organisationsList = organisations.tokenize(',')

    static def globalWebhooks = '<%= p('sonar.webhooks.global.list') %>'

    private static String encode(value) {
        return URLEncoder.encode(value, 'UTF-8')
    }

    static def buildSingleValuedKeyPair(String key, String value) {
        return encode(key) + '=' + encode(value)
    }

    static def buildMultiValuedKeyPair(String key, Iterator<String> values) {
        if (!values.hasNext()) {
            return buildSingleValuedKeyPair(key, values.next())
        }

        def keyPair = encode(key) + '=' + encode(values.next())

        while (values.hasNext()) {
            keyPair += '&' + encode(key) + '=' + encode(values.next())
        }

        return keyPair
    }

    static def buildQueryString(Iterator<String> keyValuePairs) {
        if (!keyValuePairs.hasNext()) {
            return ''
        }

        def pair = keyValuePairs.next()

        for (keyValuePair in keyValuePairs) {
            pair += '&' + keyValuePair
        }

        return pair
    }

    private static String generateAuthValue() {
        return "${username}:${password}".getBytes().encodeBase64().toString()
    }   

    private static HttpURLConnection openPostConnection(String url) {
        def connection = new URL(url).openConnection() as HttpURLConnection

        connection.setRequestProperty('Accept', 'application/json')
        connection.setRequestProperty('Authorization', "Basic ${generateAuthValue()}")
        connection.setRequestMethod('POST')
        connection.doOutput = true

        return connection
    }

    static boolean postQueryString(
                    String url,
                    String queryString,
                    int numberOfTimesToRetry = 60,
                    int delayBetweenRetriesInMilliseconds = 1000) {

        def finalResponseReceived = false
        def now

        while ((!finalResponseReceived) && (numberOfTimesToRetry-- > 0)) {

            def connection
            def writer

            try {
                connection = openPostConnection(url)
                writer = new OutputStreamWriter(connection.outputStream)

                writer.write(queryString)
                writer.flush()

                def responseCode = connection.responseCode

                if ((responseCode == HttpURLConnection.HTTP_NOT_FOUND) ||
                    (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED)) {
                    sleep(delayBetweenRetriesInMilliseconds)
                    now = new Date().format("yyy/MM/dd HH:mm:ss")
                    println "${now} - Waiting ${delayBetweenRetriesInMilliseconds} milliseconds to post to ${url} with " +
                            "${numberOfTimesToRetry} retries remaining"
                } else if (responseCode == HttpURLConnection.HTTP_OK ||
                           responseCode == HttpURLConnection.HTTP_NO_CONTENT) {
                    now = new Date().format("yyy/MM/dd HH:mm:ss")
                    println "${now} - Request to ${url} with query string ${queryString} succeeded"
                    finalResponseReceived = true
                } else if (responseCode == HttpURLConnection.HTTP_BAD_REQUEST ) {
                    now = new Date().format("yyy/MM/dd HH:mm:ss")
                    println "${now} - Words cannot describe why an HTTP 400 is returned for a record which already exists, sigh!"
                    println "${now} - Request to ${url} with query string ${queryString} already exists: ${responseCode}"
                    finalResponseReceived = true
                } else {
                    now = new Date().format("yyy/MM/dd HH:mm:ss")
                    println "${now} - Request to ${url} with query string ${queryString} failed with status " +
                            "${responseCode} and response ${connection.responseMessage}"
                    return false
                }
            } catch (IOException ioe) {
                now = new Date().format("yyy/MM/dd HH:mm:ss")
                println "${now} - Request failed with error: ${ioe}"
                sleep(delayBetweenRetriesInMilliseconds)
                now = new Date().format("yyy/MM/dd HH:mm:ss")
                println "${now} - Waiting ${delayBetweenRetriesInMilliseconds} milliseconds to post to ${url} with " +
                            "${numberOfTimesToRetry} retries remaining"
            } finally {
                if (writer != null) writer.close()
                if (connection != null) connection.disconnect()
            }
        }

        if (!finalResponseReceived) {
            now = new Date().format("yyy/MM/dd HH:mm:ss")
            println "${now} - Timed out waiting for response from ${url}"
            return false
        }

        return true
    }
}

